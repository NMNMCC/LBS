using extension graphql;
using extension edgeql_http;
using extension pgcrypto;

module default {
    scalar type short_str extending str {
        constraint max_len_value(100);
    }

    scalar type long_str extending str {
        constraint max_len_value(10000);
    }

    abstract type Base {
        required _id: uuid {
            readonly := true;
            constraint exclusive;
        }

        index on (._id)
    }

    abstract type Auditable {
        required created_at: datetime {
            rewrite insert using (datetime_of_statement());
            default := datetime_of_statement();
            readonly := true;
        }
        required updated_at: datetime {
            rewrite insert, update using (datetime_of_statement());
            default := datetime_of_statement();
        }
    }

    abstract type Relatable {
        multi link related_to: Relatable;
        related_by := .<related_to[is Relatable];
    }

    abstract type Nameable extending Base {
        required name: short_str;

        index on (.name);
    }

    abstract type Evaluable {
        multi link up := .<owned_up[is Person];
        multi link down := .<owned_down[is Person];
        multi link favorites := .<owned_favorites[is Person];
    }

    type Book extending Nameable, Auditable, Evaluable, Relatable {
        isbn: short_str;

        cover: str;
        description: long_str;

        required grabbed_from: str;
        required length: int64;

        multi link authors := .<books[is Author];
        multi link chapters := .<book[is Chapter];
        link chapter_order := .<book[is ChapterOrder];
        multi link publishers := .<books[is Publisher];

        index on (.length);
    }

    type Chapter extending Nameable, Evaluable, Relatable {
        required single link book: Book;
    }

    type ChapterOrder {
        required content: json;
        required single link book: Book;
    }

    type Tag extending Nameable, Auditable, Relatable {
        multi link owners := .<owned_tags[is Person];
        required type: short_str;

        index on (.type);
    }

    type Publisher extending Nameable, Evaluable, Relatable {
        multi link books: Book {
            date: datetime;
            isbn: short_str;
        };
    }

    type Author extending Nameable, Evaluable, Relatable {
        description: long_str;

        link user := .<authors[is User];
        multi link books: Book;
    }

    abstract type Person extending Nameable, Auditable, Evaluable, Relatable {
        multi link owned_up: Evaluable;
        multi link owned_down: Evaluable;
        multi link owned_favorites: Evaluable;
        multi link owned_tags: Tag;
    }

    type User extending Person {
        description: long_str;
    
        avatar: str;
        required email: short_str;

        multi link friends: User;
        multi link authors: Author {
            constraint exclusive;
        };

        index on (.email);
    }

    type Identity extending Auditable {
        required password: str;
        required single link user: User;

        index on (.user);
    }

    type Organization extending Person {
        multi link members: Person {
            power: int32 {
                default := 99;
                constraint min_value(0);
                constraint max_value(99);
            }
        }
    }

    type Thread extending Nameable, Auditable, Evaluable, Relatable {
        required link author: Person;
        required content: long_str;

        multi link replies: Thread;
    }
}
