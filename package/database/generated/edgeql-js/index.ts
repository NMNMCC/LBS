// GENERATED by @gel/generate v0.6.4

export * from "./external.ts";
export { createClient } from "gel";
import * as $ from "./reflection.ts";
import * as $syntax from "./syntax.ts";
import * as $op from "./operators.ts";
import _std from "./modules/std.ts";
import _cfg from "./modules/cfg.ts";
import _default from "./modules/default.ts";
import _schema from "./modules/schema.ts";
import _sys from "./modules/sys.ts";
import _ext from "./modules/ext.ts";

const ExportDefault: typeof _std & 
  typeof _default & 
  $.util.OmitDollarPrefixed<typeof $syntax> & 
  typeof $op & {
  "std": typeof _std;
  "cfg": typeof _cfg;
  "default": typeof _default;
  "schema": typeof _schema;
  "sys": typeof _sys;
  "ext": typeof _ext;
} = {
  ..._std,
  ..._default,
  ...$.util.omitDollarPrefixed($syntax),
  ...$op,
  "std": _std,
  "cfg": _cfg,
  "default": _default,
  "schema": _schema,
  "sys": _sys,
  "ext": _ext,
};
const Cardinality = $.Cardinality;
type Cardinality = $.Cardinality;
export type Set<
  Type extends $.BaseType,
  Card extends $.Cardinality = $.Cardinality.Many
> = $.TypeSet<Type, Card>;


export default ExportDefault;
export { Cardinality };
