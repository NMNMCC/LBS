// GENERATED by @gel/generate v0.6.4

import * as $ from "../reflection.ts";
import * as _ from "../imports.ts";
import type * as _std from "./std.ts";
export type $long_str = $.ScalarType<"std::str", string>;
const long_str: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "bd77bcef-7bee-11f0-bb77-4349e86077cc", _.syntax.literal);

export type $short_str = $.ScalarType<"std::str", string>;
const short_str: $.scalarTypeWithConstructor<_std.$str, never> = $.makeType<$.scalarTypeWithConstructor<_std.$str, never>>(_.spec, "bd78f83c-7bee-11f0-bdd6-ad08e2fe7c86", _.syntax.literal);

export type $AuditableλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "created_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, true, true>;
  "updated_at": $.PropertyDesc<_std.$datetime, $.Cardinality.One, false, false, false, true>;
}>;
type $Auditable = $.ObjectType<"default::Auditable", $AuditableλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::Book" | "default::Identity" | "default::Organization" | "default::Tag" | "default::Thread" | "default::User">;
const $Auditable = $.makeType<$Auditable>(_.spec, "bd7b7ba4-7bee-11f0-b77b-15361df28809", _.syntax.literal);

const Auditable: $.$expr_PathNode<$.TypeSet<$Auditable, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Auditable, $.Cardinality.Many), null);

export type $BaseλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "_id": $.PropertyDesc<_std.$uuid, $.Cardinality.One, true, false, true, false>;
}>;
type $Base = $.ObjectType<"default::Base", $BaseλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {_id: {__element__: _std.$uuid, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::Author" | "default::Book" | "default::Chapter" | "default::Organization" | "default::Publisher" | "default::Tag" | "default::Thread" | "default::User">;
const $Base = $.makeType<$Base>(_.spec, "bd7e6686-7bee-11f0-97aa-873b708600ac", _.syntax.literal);

const Base: $.$expr_PathNode<$.TypeSet<$Base, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Base, $.Cardinality.Many), null);

export type $NameableλShape = $.typeutil.flatten<$BaseλShape & {
  "name": $.PropertyDesc<$short_str, $.Cardinality.One, false, false, false, false>;
}>;
type $Nameable = $.ObjectType<"default::Nameable", $NameableλShape, null, [
  ...$Base['__exclusives__'],
], "default::Author" | "default::Book" | "default::Chapter" | "default::Organization" | "default::Publisher" | "default::Tag" | "default::Thread" | "default::User">;
const $Nameable = $.makeType<$Nameable>(_.spec, "bd8008c9-7bee-11f0-b95c-edf548d1a8bb", _.syntax.literal);

const Nameable: $.$expr_PathNode<$.TypeSet<$Nameable, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Nameable, $.Cardinality.Many), null);

export type $EvaluableλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "down": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, true,  false, false>;
  "favorites": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, true,  false, false>;
  "up": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, true,  false, false>;
  "<owned_down[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_favorites[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_up[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_up[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_favorites[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_down[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_up[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_favorites[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_down[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_down": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_favorites": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_up": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Evaluable = $.ObjectType<"default::Evaluable", $EvaluableλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::Author" | "default::Book" | "default::Chapter" | "default::Organization" | "default::Publisher" | "default::Thread" | "default::User">;
const $Evaluable = $.makeType<$Evaluable>(_.spec, "bd822721-7bee-11f0-9b43-c3c951c96e3d", _.syntax.literal);

const Evaluable: $.$expr_PathNode<$.TypeSet<$Evaluable, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Evaluable, $.Cardinality.Many), null);

export type $RelatableλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "related_to": $.LinkDesc<$Relatable, $.Cardinality.Many, {}, false, false,  false, false>;
  "related_by": $.LinkDesc<$Relatable, $.Cardinality.Many, {}, false, true,  false, false>;
  "<related_to[is Relatable]": $.LinkDesc<$Relatable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Relatable]": $.LinkDesc<$Relatable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Tag]": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Tag]": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_by": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<related_to": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Relatable = $.ObjectType<"default::Relatable", $RelatableλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::Author" | "default::Book" | "default::Chapter" | "default::Organization" | "default::Publisher" | "default::Tag" | "default::Thread" | "default::User">;
const $Relatable = $.makeType<$Relatable>(_.spec, "bd830abd-7bee-11f0-83a8-372ae34b25a4", _.syntax.literal);

const Relatable: $.$expr_PathNode<$.TypeSet<$Relatable, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Relatable, $.Cardinality.Many), null);

export type $AuthorλShape = $.typeutil.flatten<$NameableλShape & $EvaluableλShape & $RelatableλShape & {
  "description": $.PropertyDesc<$long_str, $.Cardinality.AtMostOne, false, false, false, false>;
  "books": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "<authors[is User]": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<authors[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authors": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Author = $.ObjectType<"default::Author", $AuthorλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Author">;
const $Author = $.makeType<$Author>(_.spec, "bdc162ca-7bee-11f0-ad96-9b0e7bf2503c", _.syntax.literal);

const Author: $.$expr_PathNode<$.TypeSet<$Author, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Author, $.Cardinality.Many), null);

export type $BookλShape = $.typeutil.flatten<$NameableλShape & $AuditableλShape & $EvaluableλShape & $RelatableλShape & {
  "length": $.PropertyDesc<_std.$int64, $.Cardinality.One, false, false, false, false>;
  "cover": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "description": $.PropertyDesc<$long_str, $.Cardinality.AtMostOne, false, false, false, false>;
  "grabbed_from": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "authors": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, true,  false, false>;
  "chapter_order": $.LinkDesc<$ChapterOrder, $.Cardinality.Many, {}, false, true,  false, false>;
  "chapters": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, true,  false, false>;
  "publishers": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, true,  false, false>;
  "<books[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<book[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<books[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<book[is ChapterOrder]": $.LinkDesc<$ChapterOrder, $.Cardinality.Many, {}, false, false,  false, false>;
  "<book": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<books": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Book = $.ObjectType<"default::Book", $BookλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Auditable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Book">;
const $Book = $.makeType<$Book>(_.spec, "bd85778e-7bee-11f0-9c71-f5ad9356af01", _.syntax.literal);

const Book: $.$expr_PathNode<$.TypeSet<$Book, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Book, $.Cardinality.Many), null);

export type $ChapterλShape = $.typeutil.flatten<$NameableλShape & $EvaluableλShape & $RelatableλShape & {
  "book": $.LinkDesc<$Book, $.Cardinality.One, {}, false, false,  false, false>;
  "<chapters[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<chapters": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Chapter = $.ObjectType<"default::Chapter", $ChapterλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Chapter">;
const $Chapter = $.makeType<$Chapter>(_.spec, "bdcb65d0-7bee-11f0-a87c-73bd8c807d0b", _.syntax.literal);

const Chapter: $.$expr_PathNode<$.TypeSet<$Chapter, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Chapter, $.Cardinality.Many), null);

export type $ChapterOrderλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "content": $.PropertyDesc<_std.$json, $.Cardinality.One, false, false, false, false>;
  "book": $.LinkDesc<$Book, $.Cardinality.One, {}, false, false,  false, false>;
  "<chapter_order[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<chapter_order": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $ChapterOrder = $.ObjectType<"default::ChapterOrder", $ChapterOrderλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
], "default::ChapterOrder">;
const $ChapterOrder = $.makeType<$ChapterOrder>(_.spec, "bddaf917-7bee-11f0-a799-096c7fe09880", _.syntax.literal);

const ChapterOrder: $.$expr_PathNode<$.TypeSet<$ChapterOrder, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($ChapterOrder, $.Cardinality.Many), null);

export type $IdentityλShape = $.typeutil.flatten<$AuditableλShape & {
  "password": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "user": $.LinkDesc<$User, $.Cardinality.One, {}, false, false,  false, false>;
}>;
type $Identity = $.ObjectType<"default::Identity", $IdentityλShape, null, [
  ...$Auditable['__exclusives__'],
], "default::Identity">;
const $Identity = $.makeType<$Identity>(_.spec, "bd8a1db2-7bee-11f0-92fc-5f285e338f6d", _.syntax.literal);

const Identity: $.$expr_PathNode<$.TypeSet<$Identity, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Identity, $.Cardinality.Many), null);

export type $PersonλShape = $.typeutil.flatten<$NameableλShape & $AuditableλShape & $EvaluableλShape & $RelatableλShape & {
  "owned_down": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "owned_favorites": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "owned_up": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "owned_tags": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "<members[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Evaluable]": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Evaluable]": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Evaluable]": $.LinkDesc<$Evaluable, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Chapter]": $.LinkDesc<$Chapter, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down[is Publisher]": $.LinkDesc<$Publisher, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owners[is Tag]": $.LinkDesc<$Tag, $.Cardinality.Many, {}, false, false,  false, false>;
  "<author": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<down": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<favorites": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<members": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owners": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<up": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Person = $.ObjectType<"default::Person", $PersonλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Auditable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Organization" | "default::User">;
const $Person = $.makeType<$Person>(_.spec, "bd8b823e-7bee-11f0-a8ad-d12ed63269e2", _.syntax.literal);

const Person: $.$expr_PathNode<$.TypeSet<$Person, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Person, $.Cardinality.Many), null);

export type $OrganizationλShape = $.typeutil.flatten<$PersonλShape & {
  "members": $.LinkDesc<$Person, $.Cardinality.Many, {
    "@power": $.PropertyDesc<_std.$int32, $.Cardinality.AtMostOne>;
  }, false, false, false, false>;
}>;
type $Organization = $.ObjectType<"default::Organization", $OrganizationλShape, null, [
  ...$Person['__exclusives__'],
], "default::Organization">;
const $Organization = $.makeType<$Organization>(_.spec, "bd9046a6-7bee-11f0-934f-737dd554ea66", _.syntax.literal);

const Organization: $.$expr_PathNode<$.TypeSet<$Organization, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Organization, $.Cardinality.Many), null);

export type $PublisherλShape = $.typeutil.flatten<$NameableλShape & $EvaluableλShape & $RelatableλShape & {
  "books": $.LinkDesc<$Book, $.Cardinality.Many, {
    "@date": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne>;
    "@isbn": $.PropertyDesc<$short_str, $.Cardinality.AtMostOne>;
  }, false, false, false, false>;
  "<publishers[is Book]": $.LinkDesc<$Book, $.Cardinality.Many, {}, false, false,  false, false>;
  "<publishers": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Publisher = $.ObjectType<"default::Publisher", $PublisherλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Publisher">;
const $Publisher = $.makeType<$Publisher>(_.spec, "bdd33dff-7bee-11f0-9e91-e14b6aab2a68", _.syntax.literal);

const Publisher: $.$expr_PathNode<$.TypeSet<$Publisher, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Publisher, $.Cardinality.Many), null);

export type $TagλShape = $.typeutil.flatten<$NameableλShape & $AuditableλShape & $RelatableλShape & {
  "type": $.PropertyDesc<$short_str, $.Cardinality.One, false, false, false, false>;
  "owners": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, true,  false, false>;
  "<owned_tags[is Person]": $.LinkDesc<$Person, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_tags[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_tags[is Organization]": $.LinkDesc<$Organization, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owned_tags": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Tag = $.ObjectType<"default::Tag", $TagλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Auditable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Tag">;
const $Tag = $.makeType<$Tag>(_.spec, "bdb4e6ec-7bee-11f0-95d9-3b3036e858d5", _.syntax.literal);

const Tag: $.$expr_PathNode<$.TypeSet<$Tag, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Tag, $.Cardinality.Many), null);

export type $ThreadλShape = $.typeutil.flatten<$NameableλShape & $AuditableλShape & $EvaluableλShape & $RelatableλShape & {
  "content": $.PropertyDesc<$long_str, $.Cardinality.One, false, false, false, false>;
  "author": $.LinkDesc<$Person, $.Cardinality.One, {}, false, false,  false, false>;
  "replies": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replies[is Thread]": $.LinkDesc<$Thread, $.Cardinality.Many, {}, false, false,  false, false>;
  "<replies": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Thread = $.ObjectType<"default::Thread", $ThreadλShape, null, [
  ...$Nameable['__exclusives__'],
  ...$Auditable['__exclusives__'],
  ...$Evaluable['__exclusives__'],
  ...$Relatable['__exclusives__'],
], "default::Thread">;
const $Thread = $.makeType<$Thread>(_.spec, "bdb95d16-7bee-11f0-bb8f-21b845b5d147", _.syntax.literal);

const Thread: $.$expr_PathNode<$.TypeSet<$Thread, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Thread, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<$PersonλShape & {
  "email": $.PropertyDesc<$short_str, $.Cardinality.One, false, false, false, false>;
  "description": $.PropertyDesc<$long_str, $.Cardinality.AtMostOne, false, false, false, false>;
  "authors": $.LinkDesc<$Author, $.Cardinality.Many, {}, true, false,  false, false>;
  "friends": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<friends[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Author]": $.LinkDesc<$Author, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user[is Identity]": $.LinkDesc<$Identity, $.Cardinality.Many, {}, false, false,  false, false>;
  "<friends": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<user": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$Person['__exclusives__'],
  {authors: {__element__: $Author, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
], "default::User">;
const $User = $.makeType<$User>(_.spec, "bdac1d1a-7bee-11f0-ac7f-09eaa96b38bc", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);



export { long_str, short_str, $Auditable, Auditable, $Base, Base, $Nameable, Nameable, $Evaluable, Evaluable, $Relatable, Relatable, $Author, Author, $Book, Book, $Chapter, Chapter, $ChapterOrder, ChapterOrder, $Identity, Identity, $Person, Person, $Organization, Organization, $Publisher, Publisher, $Tag, Tag, $Thread, Thread, $User, User };

type __defaultExports = {
  "long_str": typeof long_str;
  "short_str": typeof short_str;
  "Auditable": typeof Auditable;
  "Base": typeof Base;
  "Nameable": typeof Nameable;
  "Evaluable": typeof Evaluable;
  "Relatable": typeof Relatable;
  "Author": typeof Author;
  "Book": typeof Book;
  "Chapter": typeof Chapter;
  "ChapterOrder": typeof ChapterOrder;
  "Identity": typeof Identity;
  "Person": typeof Person;
  "Organization": typeof Organization;
  "Publisher": typeof Publisher;
  "Tag": typeof Tag;
  "Thread": typeof Thread;
  "User": typeof User
};
const __defaultExports: __defaultExports = {
  "long_str": long_str,
  "short_str": short_str,
  "Auditable": Auditable,
  "Base": Base,
  "Nameable": Nameable,
  "Evaluable": Evaluable,
  "Relatable": Relatable,
  "Author": Author,
  "Book": Book,
  "Chapter": Chapter,
  "ChapterOrder": ChapterOrder,
  "Identity": Identity,
  "Person": Person,
  "Organization": Organization,
  "Publisher": Publisher,
  "Tag": Tag,
  "Thread": Thread,
  "User": User
};
export default __defaultExports;
